// initialize the stack pointer to 0x0100
@256
D=A
@SP
M=D
// invoke Sys.init
//call  Sys.init 0
@Array.Sys.init$RET.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@0
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Array.Sys.init$RET.0)
//function Array.new 0
(Array.new)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
M=M-1
A=M
D=M
@YGT.Array0
D;JGT
@SP
A=M-1
D=M
@XGTY.Array0
D;JGT
(XMINUSY.Array0)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XGTY.Array0
D;JGT
(XLEY.Array0)
@SP
A=M-1
D=M
M=0
@END.Array0
0;JMP
(YGT.Array0)
@SP
A=M-1
D=M
@XMINUSY.Array0
D;JGT
@XLEY.Array0
0;JMP
(XGTY.Array0)
@SP
A=M-1
M=-1
(END.Array0)
//not
@SP
A=M-1
M=!M
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M

@Array.new$IF_TRUE0
D;JNE
//goto IF_FALSE0
@Array.new$IF_FALSE0
0;JMP
//label IF_TRUE0
(Array.new$IF_TRUE0)
//push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
//call  Sys.error 1
@Array.Sys.error$RET.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Array.Sys.error$RET.1)
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE0
(Array.new$IF_FALSE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call  Memory.alloc 1
@Array.Memory.alloc$RET.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Array.Memory.alloc$RET.2)
//return
@LCL
D=M
@R15
M=D
@5
D=A
@R15
D=M-D
A=D
D=M
@R14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
A=M-1
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Array.dispose 0
(Array.dispose)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//call  Memory.deAlloc 1
@Array.Memory.deAlloc$RET.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Array.Memory.deAlloc$RET.3)
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//return
@LCL
D=M
@R15
M=D
@5
D=A
@R15
D=M-D
A=D
D=M
@R14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
A=M-1
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// initialize the stack pointer to 0x0100
@256
D=A
@SP
M=D
// invoke Sys.init
//call  Sys.init 0
@Main.Sys.init$RET.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@0
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Main.Sys.init$RET.0)
//function Main.main 12
(Main.main)
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//pop local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
//pop local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
//pop local 2
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 4
@4
D=A
@SP
M=M+1
A=M-1
M=D
//pop local 3
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 5
@5
D=A
@SP
M=M+1
A=M-1
M=D
//pop local 4
@LCL
D=M
@4
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
//pop local 5
@LCL
D=M
@5
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push local 5
@LCL
D=M
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop local 6
@LCL
D=M
@6
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call  Math.multiply 2
@Main.Math.multiply$RET.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@2
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Main.Math.multiply$RET.1)
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call  Math.multiply 2
@Main.Math.multiply$RET.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@2
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Main.Math.multiply$RET.2)
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local 5
@LCL
D=M
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call  Math.multiply 2
@Main.Math.multiply$RET.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@2
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Main.Math.multiply$RET.3)
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop local 7
@LCL
D=M
@7
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 5
@LCL
D=M
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call  Math.divide 2
@Main.Math.divide$RET.4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@2
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Main.Math.divide$RET.4)
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call  Math.divide 2
@Main.Math.divide$RET.5
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@2
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Main.Math.divide$RET.5)
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call  Math.divide 2
@Main.Math.divide$RET.6
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@2
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Main.Math.divide$RET.6)
//pop local 8
@LCL
D=M
@8
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 5000
@5000
D=A
@SP
M=M+1
A=M-1
M=D
//push local 6
@LCL
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call  Memory.poke 2
@Main.Memory.poke$RET.7
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@2
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Main.Memory.poke$RET.7)
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 5001
@5001
D=A
@SP
M=M+1
A=M-1
M=D
//push local 7
@LCL
D=M
@7
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call  Memory.poke 2
@Main.Memory.poke$RET.8
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@2
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Main.Memory.poke$RET.8)
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 5002
@5002
D=A
@SP
M=M+1
A=M-1
M=D
//push local 8
@LCL
D=M
@8
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call  Memory.poke 2
@Main.Memory.poke$RET.9
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@2
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Main.Memory.poke$RET.9)
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//return
@LCL
D=M
@R15
M=D
@5
D=A
@R15
D=M-D
A=D
D=M
@R14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
A=M-1
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// initialize the stack pointer to 0x0100
@256
D=A
@SP
M=D
// invoke Sys.init
//call  Sys.init 0
@Math.Sys.init$RET.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@0
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Math.Sys.init$RET.0)
//function Math.init 1
(Math.init)
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
//call  Array.new 1
@Math.Array.new$RET.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Math.Array.new$RET.1)
//pop static 1
@SP
M=M-1
A=M
D=M
@Math.1
M=D
//push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
//call  Array.new 1
@Math.Array.new$RET.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Math.Array.new$RET.2)
//pop static 0
@SP
M=M-1
A=M
D=M
@Math.0
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push static 0
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push temp 0
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label WHILE_EXP0
(Math.init$WHILE_EXP0)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 15
@15
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
M=M-1
A=M
D=M
@YLT.Math0
D;JLT
@SP
A=M-1
D=M
@XLTY.Math0
D;JLT
(XMINUSY.Math0)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XLTY.Math0
D;JLT
(XGEY.Math0)
@SP
A=M-1
D=M
M=0
@END.Math0
0;JMP
(YLT.Math0)
@SP
A=M-1
D=M
@XMINUSY.Math0
D;JLT
@XGEY.Math0
0;JMP
(XLTY.Math0)
@SP
A=M-1
M=-1
(END.Math0)
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M

@Math.init$WHILE_END0
D;JNE
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push static 0
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
//push static 0
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
//push static 0
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push temp 0
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//goto WHILE_EXP0
@Math.init$WHILE_EXP0
0;JMP
//label WHILE_END0
(Math.init$WHILE_END0)
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//return
@LCL
D=M
@R15
M=D
@5
D=A
@R15
D=M-D
A=D
D=M
@R14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
A=M-1
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Math.abs 0
(Math.abs)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
M=M-1
A=M
D=M
@YLT.Math1
D;JLT
@SP
A=M-1
D=M
@XLTY.Math1
D;JLT
(XMINUSY.Math1)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XLTY.Math1
D;JLT
(XGEY.Math1)
@SP
A=M-1
D=M
M=0
@END.Math1
0;JMP
(YLT.Math1)
@SP
A=M-1
D=M
@XMINUSY.Math1
D;JLT
@XGEY.Math1
0;JMP
(XLTY.Math1)
@SP
A=M-1
M=-1
(END.Math1)
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M

@Math.abs$IF_TRUE0
D;JNE
//goto IF_FALSE0
@Math.abs$IF_FALSE0
0;JMP
//label IF_TRUE0
(Math.abs$IF_TRUE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//neg
@SP
A=M-1
M=-M
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE0
(Math.abs$IF_FALSE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//return
@LCL
D=M
@R15
M=D
@5
D=A
@R15
D=M-D
A=D
D=M
@R14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
A=M-1
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Math.multiply 5
(Math.multiply)
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
M=M-1
A=M
D=M
@YLT.Math2
D;JLT
@SP
A=M-1
D=M
@XLTY.Math2
D;JLT
(XMINUSY.Math2)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XLTY.Math2
D;JLT
(XGEY.Math2)
@SP
A=M-1
D=M
M=0
@END.Math2
0;JMP
(YLT.Math2)
@SP
A=M-1
D=M
@XMINUSY.Math2
D;JLT
@XGEY.Math2
0;JMP
(XLTY.Math2)
@SP
A=M-1
M=-1
(END.Math2)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
M=M-1
A=M
D=M
@YGT.Math3
D;JGT
@SP
A=M-1
D=M
@XGTY.Math3
D;JGT
(XMINUSY.Math3)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XGTY.Math3
D;JGT
(XLEY.Math3)
@SP
A=M-1
D=M
M=0
@END.Math3
0;JMP
(YGT.Math3)
@SP
A=M-1
D=M
@XMINUSY.Math3
D;JGT
@XLEY.Math3
0;JMP
(XGTY.Math3)
@SP
A=M-1
M=-1
(END.Math3)
//and
@SP
M=M-1
A=M
D=M
A=A-1
M=D&M
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
M=M-1
A=M
D=M
@YGT.Math4
D;JGT
@SP
A=M-1
D=M
@XGTY.Math4
D;JGT
(XMINUSY.Math4)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XGTY.Math4
D;JGT
(XLEY.Math4)
@SP
A=M-1
D=M
M=0
@END.Math4
0;JMP
(YGT.Math4)
@SP
A=M-1
D=M
@XMINUSY.Math4
D;JGT
@XLEY.Math4
0;JMP
(XGTY.Math4)
@SP
A=M-1
M=-1
(END.Math4)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
M=M-1
A=M
D=M
@YLT.Math5
D;JLT
@SP
A=M-1
D=M
@XLTY.Math5
D;JLT
(XMINUSY.Math5)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XLTY.Math5
D;JLT
(XGEY.Math5)
@SP
A=M-1
D=M
M=0
@END.Math5
0;JMP
(YLT.Math5)
@SP
A=M-1
D=M
@XMINUSY.Math5
D;JLT
@XGEY.Math5
0;JMP
(XLTY.Math5)
@SP
A=M-1
M=-1
(END.Math5)
//and
@SP
M=M-1
A=M
D=M
A=A-1
M=D&M
//or
@SP
M=M-1
A=M
D=M
A=A-1
M=D|M
//pop local 4
@LCL
D=M
@4
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call  Math.abs 1
@Math.Math.abs$RET.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.Math.abs$RET.3)
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call  Math.abs 1
@Math.Math.abs$RET.4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.Math.abs$RET.4)
//pop argument 1
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@SP
M=M-1
A=M
D=M
@YLT.Math6
D;JLT
@SP
A=M-1
D=M
@XLTY.Math6
D;JLT
(XMINUSY.Math6)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XLTY.Math6
D;JLT
(XGEY.Math6)
@SP
A=M-1
D=M
M=0
@END.Math6
0;JMP
(YLT.Math6)
@SP
A=M-1
D=M
@XMINUSY.Math6
D;JLT
@XGEY.Math6
0;JMP
(XLTY.Math6)
@SP
A=M-1
M=-1
(END.Math6)
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M

@Math.multiply$IF_TRUE0
D;JNE
//goto IF_FALSE0
@Math.multiply$IF_FALSE0
0;JMP
//label IF_TRUE0
(Math.multiply$IF_TRUE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop argument 1
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE0
(Math.multiply$IF_FALSE0)
//label WHILE_EXP0
(Math.multiply$WHILE_EXP0)
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@SP
M=M-1
A=M
D=M
@YLT.Math7
D;JLT
@SP
A=M-1
D=M
@XLTY.Math7
D;JLT
(XMINUSY.Math7)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XLTY.Math7
D;JLT
(XGEY.Math7)
@SP
A=M-1
D=M
M=0
@END.Math7
0;JMP
(YLT.Math7)
@SP
A=M-1
D=M
@XMINUSY.Math7
D;JLT
@XGEY.Math7
0;JMP
(XLTY.Math7)
@SP
A=M-1
M=-1
(END.Math7)
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M

@Math.multiply$WHILE_END0
D;JNE
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push static 0
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//and
@SP
M=M-1
A=M
D=M
A=A-1
M=D&M
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
M=M-1
A=M
D=M
@YGT.Math8
D;JGT
@SP
A=M-1
D=M
@XGTY.Math8
D;JGT
(XMINUSY.Math8)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XGTY.Math8
D;JGT
(XLEY.Math8)
@SP
A=M-1
D=M
M=0
@END.Math8
0;JMP
(YGT.Math8)
@SP
A=M-1
D=M
@XMINUSY.Math8
D;JGT
@XLEY.Math8
0;JMP
(XGTY.Math8)
@SP
A=M-1
M=-1
(END.Math8)
//if-goto IF_TRUE1
@SP
M=M-1
A=M
D=M

@Math.multiply$IF_TRUE1
D;JNE
//goto IF_FALSE1
@Math.multiply$IF_FALSE1
0;JMP
//label IF_TRUE1
(Math.multiply$IF_TRUE1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push static 0
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop local 2
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE1
(Math.multiply$IF_FALSE1)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop local 3
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//goto WHILE_EXP0
@Math.multiply$WHILE_EXP0
0;JMP
//label WHILE_END0
(Math.multiply$WHILE_END0)
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//if-goto IF_TRUE2
@SP
M=M-1
A=M
D=M

@Math.multiply$IF_TRUE2
D;JNE
//goto IF_FALSE2
@Math.multiply$IF_FALSE2
0;JMP
//label IF_TRUE2
(Math.multiply$IF_TRUE2)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//neg
@SP
A=M-1
M=-M
//pop local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE2
(Math.multiply$IF_FALSE2)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//return
@LCL
D=M
@R15
M=D
@5
D=A
@R15
D=M-D
A=D
D=M
@R14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
A=M-1
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Math.divide 4
(Math.divide)
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
M=M-1
A=M
D=M
A=A-1
D=M-D
M=0
@NEQ.Math9
D;JNE
@SP
A=M-1
M=-1
(NEQ.Math9)
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M

@Math.divide$IF_TRUE0
D;JNE
//goto IF_FALSE0
@Math.divide$IF_FALSE0
0;JMP
//label IF_TRUE0
(Math.divide$IF_TRUE0)
//push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
//call  Sys.error 1
@Math.Sys.error$RET.5
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Math.Sys.error$RET.5)
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE0
(Math.divide$IF_FALSE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
M=M-1
A=M
D=M
@YLT.Math10
D;JLT
@SP
A=M-1
D=M
@XLTY.Math10
D;JLT
(XMINUSY.Math10)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XLTY.Math10
D;JLT
(XGEY.Math10)
@SP
A=M-1
D=M
M=0
@END.Math10
0;JMP
(YLT.Math10)
@SP
A=M-1
D=M
@XMINUSY.Math10
D;JLT
@XGEY.Math10
0;JMP
(XLTY.Math10)
@SP
A=M-1
M=-1
(END.Math10)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
M=M-1
A=M
D=M
@YGT.Math11
D;JGT
@SP
A=M-1
D=M
@XGTY.Math11
D;JGT
(XMINUSY.Math11)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XGTY.Math11
D;JGT
(XLEY.Math11)
@SP
A=M-1
D=M
M=0
@END.Math11
0;JMP
(YGT.Math11)
@SP
A=M-1
D=M
@XMINUSY.Math11
D;JGT
@XLEY.Math11
0;JMP
(XGTY.Math11)
@SP
A=M-1
M=-1
(END.Math11)
//and
@SP
M=M-1
A=M
D=M
A=A-1
M=D&M
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
M=M-1
A=M
D=M
@YGT.Math12
D;JGT
@SP
A=M-1
D=M
@XGTY.Math12
D;JGT
(XMINUSY.Math12)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XGTY.Math12
D;JGT
(XLEY.Math12)
@SP
A=M-1
D=M
M=0
@END.Math12
0;JMP
(YGT.Math12)
@SP
A=M-1
D=M
@XMINUSY.Math12
D;JGT
@XLEY.Math12
0;JMP
(XGTY.Math12)
@SP
A=M-1
M=-1
(END.Math12)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
M=M-1
A=M
D=M
@YLT.Math13
D;JLT
@SP
A=M-1
D=M
@XLTY.Math13
D;JLT
(XMINUSY.Math13)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XLTY.Math13
D;JLT
(XGEY.Math13)
@SP
A=M-1
D=M
M=0
@END.Math13
0;JMP
(YLT.Math13)
@SP
A=M-1
D=M
@XMINUSY.Math13
D;JLT
@XGEY.Math13
0;JMP
(XLTY.Math13)
@SP
A=M-1
M=-1
(END.Math13)
//and
@SP
M=M-1
A=M
D=M
A=A-1
M=D&M
//or
@SP
M=M-1
A=M
D=M
A=A-1
M=D|M
//pop local 2
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push static 1
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call  Math.abs 1
@Math.Math.abs$RET.6
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.Math.abs$RET.6)
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push temp 0
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call  Math.abs 1
@Math.Math.abs$RET.7
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.Math.abs$RET.7)
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label WHILE_EXP0
(Math.divide$WHILE_EXP0)
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//not
@SP
A=M-1
M=!M
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M

@Math.divide$WHILE_END0
D;JNE
//push constant 32767
@32767
D=A
@SP
M=M+1
A=M-1
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push static 1
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push static 1
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@SP
M=M-1
A=M
D=M
@YLT.Math14
D;JLT
@SP
A=M-1
D=M
@XLTY.Math14
D;JLT
(XMINUSY.Math14)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XLTY.Math14
D;JLT
(XGEY.Math14)
@SP
A=M-1
D=M
M=0
@END.Math14
0;JMP
(YLT.Math14)
@SP
A=M-1
D=M
@XMINUSY.Math14
D;JLT
@XGEY.Math14
0;JMP
(XLTY.Math14)
@SP
A=M-1
M=-1
(END.Math14)
//pop local 3
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//not
@SP
A=M-1
M=!M
//if-goto IF_TRUE1
@SP
M=M-1
A=M
D=M

@Math.divide$IF_TRUE1
D;JNE
//goto IF_FALSE1
@Math.divide$IF_FALSE1
0;JMP
//label IF_TRUE1
(Math.divide$IF_TRUE1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push static 1
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push static 1
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push static 1
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push temp 0
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push static 1
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@SP
M=M-1
A=M
D=M
@YGT.Math15
D;JGT
@SP
A=M-1
D=M
@XGTY.Math15
D;JGT
(XMINUSY.Math15)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XGTY.Math15
D;JGT
(XLEY.Math15)
@SP
A=M-1
D=M
M=0
@END.Math15
0;JMP
(YGT.Math15)
@SP
A=M-1
D=M
@XMINUSY.Math15
D;JGT
@XLEY.Math15
0;JMP
(XGTY.Math15)
@SP
A=M-1
M=-1
(END.Math15)
//pop local 3
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//not
@SP
A=M-1
M=!M
//if-goto IF_TRUE2
@SP
M=M-1
A=M
D=M

@Math.divide$IF_TRUE2
D;JNE
//goto IF_FALSE2
@Math.divide$IF_FALSE2
0;JMP
//label IF_TRUE2
(Math.divide$IF_TRUE2)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE2
(Math.divide$IF_FALSE2)
//label IF_FALSE1
(Math.divide$IF_FALSE1)
//goto WHILE_EXP0
@Math.divide$WHILE_EXP0
0;JMP
//label WHILE_END0
(Math.divide$WHILE_END0)
//label WHILE_EXP1
(Math.divide$WHILE_EXP1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//neg
@SP
A=M-1
M=-M
//gt
@SP
M=M-1
A=M
D=M
@YGT.Math16
D;JGT
@SP
A=M-1
D=M
@XGTY.Math16
D;JGT
(XMINUSY.Math16)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XGTY.Math16
D;JGT
(XLEY.Math16)
@SP
A=M-1
D=M
M=0
@END.Math16
0;JMP
(YGT.Math16)
@SP
A=M-1
D=M
@XMINUSY.Math16
D;JGT
@XLEY.Math16
0;JMP
(XGTY.Math16)
@SP
A=M-1
M=-1
(END.Math16)
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END1
@SP
M=M-1
A=M
D=M

@Math.divide$WHILE_END1
D;JNE
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push static 1
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@SP
M=M-1
A=M
D=M
@YGT.Math17
D;JGT
@SP
A=M-1
D=M
@XGTY.Math17
D;JGT
(XMINUSY.Math17)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XGTY.Math17
D;JGT
(XLEY.Math17)
@SP
A=M-1
D=M
M=0
@END.Math17
0;JMP
(YGT.Math17)
@SP
A=M-1
D=M
@XMINUSY.Math17
D;JGT
@XLEY.Math17
0;JMP
(XGTY.Math17)
@SP
A=M-1
M=-1
(END.Math17)
//not
@SP
A=M-1
M=!M
//if-goto IF_TRUE3
@SP
M=M-1
A=M
D=M

@Math.divide$IF_TRUE3
D;JNE
//goto IF_FALSE3
@Math.divide$IF_FALSE3
0;JMP
//label IF_TRUE3
(Math.divide$IF_TRUE3)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push static 0
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push static 1
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE3
(Math.divide$IF_FALSE3)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
//pop local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//goto WHILE_EXP1
@Math.divide$WHILE_EXP1
0;JMP
//label WHILE_END1
(Math.divide$WHILE_END1)
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//if-goto IF_TRUE4
@SP
M=M-1
A=M
D=M

@Math.divide$IF_TRUE4
D;JNE
//goto IF_FALSE4
@Math.divide$IF_FALSE4
0;JMP
//label IF_TRUE4
(Math.divide$IF_TRUE4)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//neg
@SP
A=M-1
M=-M
//pop local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE4
(Math.divide$IF_FALSE4)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//return
@LCL
D=M
@R15
M=D
@5
D=A
@R15
D=M-D
A=D
D=M
@R14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
A=M-1
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Math.sqrt 2
(Math.sqrt)
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
M=M-1
A=M
D=M
@YLT.Math18
D;JLT
@SP
A=M-1
D=M
@XLTY.Math18
D;JLT
(XMINUSY.Math18)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XLTY.Math18
D;JLT
(XGEY.Math18)
@SP
A=M-1
D=M
M=0
@END.Math18
0;JMP
(YLT.Math18)
@SP
A=M-1
D=M
@XMINUSY.Math18
D;JLT
@XGEY.Math18
0;JMP
(XLTY.Math18)
@SP
A=M-1
M=-1
(END.Math18)
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M

@Math.sqrt$IF_TRUE0
D;JNE
//goto IF_FALSE0
@Math.sqrt$IF_FALSE0
0;JMP
//label IF_TRUE0
(Math.sqrt$IF_TRUE0)
//push constant 4
@4
D=A
@SP
M=M+1
A=M-1
M=D
//call  Sys.error 1
@Math.Sys.error$RET.8
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Math.Sys.error$RET.8)
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE0
(Math.sqrt$IF_FALSE0)
//push constant 7
@7
D=A
@SP
M=M+1
A=M-1
M=D
//pop local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label WHILE_EXP0
(Math.sqrt$WHILE_EXP0)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//neg
@SP
A=M-1
M=-M
//gt
@SP
M=M-1
A=M
D=M
@YGT.Math19
D;JGT
@SP
A=M-1
D=M
@XGTY.Math19
D;JGT
(XMINUSY.Math19)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XGTY.Math19
D;JGT
(XLEY.Math19)
@SP
A=M-1
D=M
M=0
@END.Math19
0;JMP
(YGT.Math19)
@SP
A=M-1
D=M
@XMINUSY.Math19
D;JGT
@XLEY.Math19
0;JMP
(XGTY.Math19)
@SP
A=M-1
M=-1
(END.Math19)
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M

@Math.sqrt$WHILE_END0
D;JNE
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push static 0
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push static 0
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//call  Math.multiply 2
@Math.Math.multiply$RET.9
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@2
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.Math.multiply$RET.9)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@SP
M=M-1
A=M
D=M
@YGT.Math20
D;JGT
@SP
A=M-1
D=M
@XGTY.Math20
D;JGT
(XMINUSY.Math20)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XGTY.Math20
D;JGT
(XLEY.Math20)
@SP
A=M-1
D=M
M=0
@END.Math20
0;JMP
(YGT.Math20)
@SP
A=M-1
D=M
@XMINUSY.Math20
D;JGT
@XLEY.Math20
0;JMP
(XGTY.Math20)
@SP
A=M-1
M=-1
(END.Math20)
//not
@SP
A=M-1
M=!M
//if-goto IF_TRUE1
@SP
M=M-1
A=M
D=M

@Math.sqrt$IF_TRUE1
D;JNE
//goto IF_FALSE1
@Math.sqrt$IF_FALSE1
0;JMP
//label IF_TRUE1
(Math.sqrt$IF_TRUE1)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push static 0
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE1
(Math.sqrt$IF_FALSE1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
//pop local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//goto WHILE_EXP0
@Math.sqrt$WHILE_EXP0
0;JMP
//label WHILE_END0
(Math.sqrt$WHILE_END0)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//return
@LCL
D=M
@R15
M=D
@5
D=A
@R15
D=M-D
A=D
D=M
@R14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
A=M-1
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Math.max 0
(Math.max)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@SP
M=M-1
A=M
D=M
@YGT.Math21
D;JGT
@SP
A=M-1
D=M
@XGTY.Math21
D;JGT
(XMINUSY.Math21)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XGTY.Math21
D;JGT
(XLEY.Math21)
@SP
A=M-1
D=M
M=0
@END.Math21
0;JMP
(YGT.Math21)
@SP
A=M-1
D=M
@XMINUSY.Math21
D;JGT
@XLEY.Math21
0;JMP
(XGTY.Math21)
@SP
A=M-1
M=-1
(END.Math21)
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M

@Math.max$IF_TRUE0
D;JNE
//goto IF_FALSE0
@Math.max$IF_FALSE0
0;JMP
//label IF_TRUE0
(Math.max$IF_TRUE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop argument 1
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE0
(Math.max$IF_FALSE0)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//return
@LCL
D=M
@R15
M=D
@5
D=A
@R15
D=M-D
A=D
D=M
@R14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
A=M-1
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Math.min 0
(Math.min)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@SP
M=M-1
A=M
D=M
@YLT.Math22
D;JLT
@SP
A=M-1
D=M
@XLTY.Math22
D;JLT
(XMINUSY.Math22)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XLTY.Math22
D;JLT
(XGEY.Math22)
@SP
A=M-1
D=M
M=0
@END.Math22
0;JMP
(YLT.Math22)
@SP
A=M-1
D=M
@XMINUSY.Math22
D;JLT
@XGEY.Math22
0;JMP
(XLTY.Math22)
@SP
A=M-1
M=-1
(END.Math22)
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M

@Math.min$IF_TRUE0
D;JNE
//goto IF_FALSE0
@Math.min$IF_FALSE0
0;JMP
//label IF_TRUE0
(Math.min$IF_TRUE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop argument 1
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE0
(Math.min$IF_FALSE0)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//return
@LCL
D=M
@R15
M=D
@5
D=A
@R15
D=M-D
A=D
D=M
@R14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
A=M-1
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// initialize the stack pointer to 0x0100
@256
D=A
@SP
M=D
// invoke Sys.init
//call  Sys.init 0
@Memory.Sys.init$RET.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@0
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Memory.Sys.init$RET.0)
//function Memory.init 0
(Memory.init)
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//pop static 0
@SP
M=M-1
A=M
D=M
@Memory.0
M=D
//push constant 2048
@2048
D=A
@SP
M=M+1
A=M-1
M=D
//push static 0
@Memory.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push constant 14334
@14334
D=A
@SP
M=M+1
A=M-1
M=D
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push temp 0
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 2049
@2049
D=A
@SP
M=M+1
A=M-1
M=D
//push static 0
@Memory.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push constant 2050
@2050
D=A
@SP
M=M+1
A=M-1
M=D
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push temp 0
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//return
@LCL
D=M
@R15
M=D
@5
D=A
@R15
D=M-D
A=D
D=M
@R14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
A=M-1
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Memory.peek 0
(Memory.peek)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push static 0
@Memory.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//return
@LCL
D=M
@R15
M=D
@5
D=A
@R15
D=M-D
A=D
D=M
@R14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
A=M-1
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Memory.poke 0
(Memory.poke)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push static 0
@Memory.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push temp 0
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//return
@LCL
D=M
@R15
M=D
@5
D=A
@R15
D=M-D
A=D
D=M
@R14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
A=M-1
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Memory.alloc 2
(Memory.alloc)
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
M=M-1
A=M
D=M
@YLT.Memory0
D;JLT
@SP
A=M-1
D=M
@XLTY.Memory0
D;JLT
(XMINUSY.Memory0)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XLTY.Memory0
D;JLT
(XGEY.Memory0)
@SP
A=M-1
D=M
M=0
@END.Memory0
0;JMP
(YLT.Memory0)
@SP
A=M-1
D=M
@XMINUSY.Memory0
D;JLT
@XGEY.Memory0
0;JMP
(XLTY.Memory0)
@SP
A=M-1
M=-1
(END.Memory0)
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M

@Memory.alloc$IF_TRUE0
D;JNE
//goto IF_FALSE0
@Memory.alloc$IF_FALSE0
0;JMP
//label IF_TRUE0
(Memory.alloc$IF_TRUE0)
//push constant 5
@5
D=A
@SP
M=M+1
A=M-1
M=D
//call  Sys.error 1
@Memory.Sys.error$RET.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Memory.Sys.error$RET.1)
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE0
(Memory.alloc$IF_FALSE0)
//push constant 2048
@2048
D=A
@SP
M=M+1
A=M-1
M=D
//pop local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label WHILE_EXP0
(Memory.alloc$WHILE_EXP0)
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@SP
M=M-1
A=M
D=M
@YLT.Memory1
D;JLT
@SP
A=M-1
D=M
@XLTY.Memory1
D;JLT
(XMINUSY.Memory1)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XLTY.Memory1
D;JLT
(XGEY.Memory1)
@SP
A=M-1
D=M
M=0
@END.Memory1
0;JMP
(YLT.Memory1)
@SP
A=M-1
D=M
@XMINUSY.Memory1
D;JLT
@XGEY.Memory1
0;JMP
(XLTY.Memory1)
@SP
A=M-1
M=-1
(END.Memory1)
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M

@Memory.alloc$WHILE_END0
D;JNE
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//goto WHILE_EXP0
@Memory.alloc$WHILE_EXP0
0;JMP
//label WHILE_END0
(Memory.alloc$WHILE_END0)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push constant 16379
@16379
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
M=M-1
A=M
D=M
@YGT.Memory2
D;JGT
@SP
A=M-1
D=M
@XGTY.Memory2
D;JGT
(XMINUSY.Memory2)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XGTY.Memory2
D;JGT
(XLEY.Memory2)
@SP
A=M-1
D=M
M=0
@END.Memory2
0;JMP
(YGT.Memory2)
@SP
A=M-1
D=M
@XMINUSY.Memory2
D;JGT
@XLEY.Memory2
0;JMP
(XGTY.Memory2)
@SP
A=M-1
M=-1
(END.Memory2)
//if-goto IF_TRUE1
@SP
M=M-1
A=M
D=M

@Memory.alloc$IF_TRUE1
D;JNE
//goto IF_FALSE1
@Memory.alloc$IF_FALSE1
0;JMP
//label IF_TRUE1
(Memory.alloc$IF_TRUE1)
//push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
//call  Sys.error 1
@Memory.Sys.error$RET.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Memory.Sys.error$RET.2)
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE1
(Memory.alloc$IF_FALSE1)
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//gt
@SP
M=M-1
A=M
D=M
@YGT.Memory3
D;JGT
@SP
A=M-1
D=M
@XGTY.Memory3
D;JGT
(XMINUSY.Memory3)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XGTY.Memory3
D;JGT
(XLEY.Memory3)
@SP
A=M-1
D=M
M=0
@END.Memory3
0;JMP
(YGT.Memory3)
@SP
A=M-1
D=M
@XMINUSY.Memory3
D;JGT
@XLEY.Memory3
0;JMP
(XGTY.Memory3)
@SP
A=M-1
M=-1
(END.Memory3)
//if-goto IF_TRUE2
@SP
M=M-1
A=M
D=M

@Memory.alloc$IF_TRUE2
D;JNE
//goto IF_FALSE2
@Memory.alloc$IF_FALSE2
0;JMP
//label IF_TRUE2
(Memory.alloc$IF_TRUE2)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
//push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
//sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push temp 0
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//eq
@SP
M=M-1
A=M
D=M
A=A-1
D=M-D
M=0
@NEQ.Memory4
D;JNE
@SP
A=M-1
M=-1
(NEQ.Memory4)
//if-goto IF_TRUE3
@SP
M=M-1
A=M
D=M

@Memory.alloc$IF_TRUE3
D;JNE
//goto IF_FALSE3
@Memory.alloc$IF_FALSE3
0;JMP
//label IF_TRUE3
(Memory.alloc$IF_TRUE3)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push constant 4
@4
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push temp 0
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//goto IF_END3
@Memory.alloc$IF_END3
0;JMP
//label IF_FALSE3
(Memory.alloc$IF_FALSE3)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push temp 0
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_END3
(Memory.alloc$IF_END3)
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push temp 0
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE2
(Memory.alloc$IF_FALSE2)
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push temp 0
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//return
@LCL
D=M
@R15
M=D
@5
D=A
@R15
D=M-D
A=D
D=M
@R14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
A=M-1
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Memory.deAlloc 2
(Memory.deAlloc)
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
//sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
//pop local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
M=M-1
A=M
D=M
A=A-1
D=M-D
M=0
@NEQ.Memory5
D;JNE
@SP
A=M-1
M=-1
(NEQ.Memory5)
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M

@Memory.deAlloc$IF_TRUE0
D;JNE
//goto IF_FALSE0
@Memory.deAlloc$IF_FALSE0
0;JMP
//label IF_TRUE0
(Memory.deAlloc$IF_TRUE0)
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
//push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
//sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push temp 0
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//goto IF_END0
@Memory.deAlloc$IF_END0
0;JMP
//label IF_FALSE0
(Memory.deAlloc$IF_FALSE0)
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push temp 0
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//eq
@SP
M=M-1
A=M
D=M
A=A-1
D=M-D
M=0
@NEQ.Memory6
D;JNE
@SP
A=M-1
M=-1
(NEQ.Memory6)
//if-goto IF_TRUE1
@SP
M=M-1
A=M
D=M

@Memory.deAlloc$IF_TRUE1
D;JNE
//goto IF_FALSE1
@Memory.deAlloc$IF_FALSE1
0;JMP
//label IF_TRUE1
(Memory.deAlloc$IF_TRUE1)
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push temp 0
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//goto IF_END1
@Memory.deAlloc$IF_END1
0;JMP
//label IF_FALSE1
(Memory.deAlloc$IF_FALSE1)
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=M+D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push temp 0
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_END1
(Memory.deAlloc$IF_END1)
//label IF_END0
(Memory.deAlloc$IF_END0)
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//return
@LCL
D=M
@R15
M=D
@5
D=A
@R15
D=M-D
A=D
D=M
@R14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
A=M-1
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// initialize the stack pointer to 0x0100
@256
D=A
@SP
M=D
// invoke Sys.init
//call  Sys.init 0
@Sys.Sys.init$RET.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@0
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.Sys.init$RET.0)
//function Sys.init 0
(Sys.init)
//call  Memory.init 0
@Sys.Memory.init$RET.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@0
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.init
0;JMP
(Sys.Memory.init$RET.1)
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//call  Math.init 0
@Sys.Math.init$RET.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@0
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.init
0;JMP
(Sys.Math.init$RET.2)
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//call  Main.main 0
@Sys.Main.main$RET.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@0
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.main
0;JMP
(Sys.Main.main$RET.3)
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label WHILE_EXP0
(Sys.init$WHILE_EXP0)
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//not
@SP
A=M-1
M=!M
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M

@Sys.init$WHILE_END0
D;JNE
//goto WHILE_EXP0
@Sys.init$WHILE_EXP0
0;JMP
//label WHILE_END0
(Sys.init$WHILE_END0)
//function Sys.halt 0
(Sys.halt)
//label WHILE_EXP0
(Sys.halt$WHILE_EXP0)
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//not
@SP
A=M-1
M=!M
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M

@Sys.halt$WHILE_END0
D;JNE
//goto WHILE_EXP0
@Sys.halt$WHILE_EXP0
0;JMP
//label WHILE_END0
(Sys.halt$WHILE_END0)
//function Sys.wait 1
(Sys.wait)
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
M=M-1
A=M
D=M
@YLT.Sys0
D;JLT
@SP
A=M-1
D=M
@XLTY.Sys0
D;JLT
(XMINUSY.Sys0)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XLTY.Sys0
D;JLT
(XGEY.Sys0)
@SP
A=M-1
D=M
M=0
@END.Sys0
0;JMP
(YLT.Sys0)
@SP
A=M-1
D=M
@XMINUSY.Sys0
D;JLT
@XGEY.Sys0
0;JMP
(XLTY.Sys0)
@SP
A=M-1
M=-1
(END.Sys0)
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M

@Sys.wait$IF_TRUE0
D;JNE
//goto IF_FALSE0
@Sys.wait$IF_FALSE0
0;JMP
//label IF_TRUE0
(Sys.wait$IF_TRUE0)
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//call  Sys.error 1
@Sys.Sys.error$RET.4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.Sys.error$RET.4)
//pop temp 0
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE0
(Sys.wait$IF_FALSE0)
//label WHILE_EXP0
(Sys.wait$WHILE_EXP0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
M=M-1
A=M
D=M
@YGT.Sys1
D;JGT
@SP
A=M-1
D=M
@XGTY.Sys1
D;JGT
(XMINUSY.Sys1)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XGTY.Sys1
D;JGT
(XLEY.Sys1)
@SP
A=M-1
D=M
M=0
@END.Sys1
0;JMP
(YGT.Sys1)
@SP
A=M-1
D=M
@XMINUSY.Sys1
D;JGT
@XLEY.Sys1
0;JMP
(XGTY.Sys1)
@SP
A=M-1
M=-1
(END.Sys1)
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M

@Sys.wait$WHILE_END0
D;JNE
//push constant 50
@50
D=A
@SP
M=M+1
A=M-1
M=D
//pop local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label WHILE_EXP1
(Sys.wait$WHILE_EXP1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
M=M-1
A=M
D=M
@YGT.Sys2
D;JGT
@SP
A=M-1
D=M
@XGTY.Sys2
D;JGT
(XMINUSY.Sys2)
@SP
A=M-1
D=M
A=A+1
D=D-M
@XGTY.Sys2
D;JGT
(XLEY.Sys2)
@SP
A=M-1
D=M
M=0
@END.Sys2
0;JMP
(YGT.Sys2)
@SP
A=M-1
D=M
@XMINUSY.Sys2
D;JGT
@XLEY.Sys2
0;JMP
(XGTY.Sys2)
@SP
A=M-1
M=-1
(END.Sys2)
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END1
@SP
M=M-1
A=M
D=M

@Sys.wait$WHILE_END1
D;JNE
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
//pop local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//goto WHILE_EXP1
@Sys.wait$WHILE_EXP1
0;JMP
//label WHILE_END1
(Sys.wait$WHILE_END1)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//goto WHILE_EXP0
@Sys.wait$WHILE_EXP0
0;JMP
//label WHILE_END0
(Sys.wait$WHILE_END0)
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//return
@LCL
D=M
@R15
M=D
@5
D=A
@R15
D=M-D
A=D
D=M
@R14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
A=M-1
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Sys.error 0
(Sys.error)
//label WHILE_EXP0
(Sys.error$WHILE_EXP0)
//push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//not
@SP
A=M-1
M=!M
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M

@Sys.error$WHILE_END0
D;JNE
//goto WHILE_EXP0
@Sys.error$WHILE_EXP0
0;JMP
//label WHILE_END0
(Sys.error$WHILE_END0)

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
 class Memory {

  static Array ram, freeList, heap;

  /** Initializes the class. */
  function void init() {
      let ram = 0;
      let heap = 2048;
      let freeList = heap;
      let heap[0] = 0;
      let heap[1] = 14335;
      return;
  }

  /** Returns the RAM value at the given address. */
  function int peek(int address) {
      return ram[address];
  }

  /** Sets the RAM value at the given address to the given value. */
  function void poke(int address, int value) {
      let ram[address] = value;
      return;
  }
  
  function int alloc(int size) {
      var Array next, block, prev;
      let block = freeList;
      let prev = 0;
      while (block[1] < size){
          let prev = block;
          let block = block[0];
      }
      let next = block + (size + 2);
      let next[1] = block[1] - (size + 2);
      let next[0] = block[0];
      let block[1] = size;
      let block[0] = 0;

      if (prev = 0) {
          let freeList = next;
      }
      else{
          let prev[0] = next;
      }
      return block + 2;
  }


    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
  function void deAlloc(Array o) {
      var Array block, next;
      let next = freeList[0];
      let block = o - 2;
      let block[0] = next;
      let freeList = block;
      return;
  }
}

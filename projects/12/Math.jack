// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array bin;
    static int checker;

    /** Initializes the library. */
    function void init() {
        let bin = Array.new(16);
        let bin[0] = 1;
        let bin[1] = 2;
        let bin[2] = 4;
        let bin[3] = 8;
        let bin[4] = 16;
        let bin[5] = 32;
        let bin[6] = 64;
        let bin[7] = 128;
        let bin[8] = 256;
        let bin[9] = 512;
        let bin[10] = 1024;
        let bin[11] = 2048;
        let bin[12] = 4096;
        let bin[13] = 8192;
        let bin[14] = 16384;
        let bin[15] = 16384 + 16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0){
            return -x;
        }
        return x;
    }

    function int power(int times){
        var int i ,power;
        if (times = 0) {
            return 1;
        }
        let i = 1;
        let power = 2;
        while (i < times){
            let power = power + power;
            let i = i + 1;
        }
        return power;
    }

    function boolean bit(int x, int i) {
        return (~((x & bin[i]) = 0));
    }


    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while (i < 16){
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        } 
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, absX, absY;
        let checker = 0;
        let absX = Math.abs(x);
        let absY = Math.abs(y);
        if ((absY > absX) | (absY < 0)){
            return 0;
        }
        let q = Math.divide(absX, absY + absY);
        if ((absX - checker) < absY) {
            if (((x > 0) & (y > 0)) | ((x < 0) & (y < 0))){
                return 2 * q;
            }
            return -(q + q);
        }
        else {
            let checker = checker + y;
            if (((x > 0) & (y > 0)) | ((x < 0) & (y < 0))){
                return (q + q) + 1;
            }
            return -((q + q) + 1);
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, i;
        let y = 0;
        let i = 7;
        while (i > -1) {
            if (((((y + bin[i]) * (y + bin[i])) - 1) < x)
             & (((y + bin[i]) * (y + bin[i])) > 0)){
                let y = y + bin[i];
            }
            let i = i - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b){
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b){
            return a;
        }
        return b;
    }
}
